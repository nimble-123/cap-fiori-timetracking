name: CI/CD Tests & Build

on:
  push:
    branches:
      - main
      - develop
      - "feature/**"
  pull_request:
    branches:
      - main
      - develop

jobs:
  lint:
    name: Linter & Format Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: 22.x
          cache: "npm"

      - name: Install Dependencies
        run: npm ci

      - name: Run Linter
        run: npm run lint
        continue-on-error: false

      - name: Check Prettier Formatting
        run: npm run format:check
        continue-on-error: false

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
      pull-requests: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: 22.x
          cache: "npm"

      - name: Install Dependencies
        run: npm ci

      - name: Install Global Tools
        run: npm i -g @sap/cds-dk typescript tsx

      - name: Run Type Generation (for typings)
        run: npx cds-typer "*"

      - name: Run Tests
        run: npm test
        env:
          NODE_ENV: test

      - name: Generate Coverage Report
        if: success()
        run: npm run test:coverage

      - name: Publish Test Report
        if: always()
        uses: dorny/test-reporter@v2
        with:
          name: Report Test Results
          path: junit.xml
          reporter: jest-junit
          fail-on-error: false
          fail-on-empty: false

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v5
        with:
          name: test-results
          path: |
            coverage/
            junit.xml
          retention-days: 30

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: ${{ contains(needs.*.result, 'failure') == false }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: 22.x
          cache: "npm"

      - name: Install Global Tools
        run: npm i -g @sap/cds-dk typescript tsx

      - name: Install Dependencies
        run: npm ci

      - name: Run Type Generation
        run: npx cds-typer "*"

      - name: Build Production
        run: npm run build

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v5
        with:
          name: build-artifacts
          path: |
            gen/
            @cds-models/
          retention-days: 7

  # Optional: Deploy to SAP BTP (auskommentiert, kann aktiviert werden)
  # deploy:
  #   name: Deploy to SAP BTP
  #   runs-on: ubuntu-latest
  #   needs: [build]
  #   if: github.ref == 'refs/heads/main'
  #
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v5
  #
  #     - name: Setup Cloud Foundry CLI
  #       run: |
  #         wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
  #         echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
  #         sudo apt-get update
  #         sudo apt-get install cf8-cli
  #
  #     - name: Deploy to Cloud Foundry
  #       run: |
  #         cf api ${{ secrets.CF_API_ENDPOINT }}
  #         cf auth ${{ secrets.CF_USERNAME }} ${{ secrets.CF_PASSWORD }}
  #         cf target -o ${{ secrets.CF_ORG }} -s ${{ secrets.CF_SPACE }}
  #         cf push
